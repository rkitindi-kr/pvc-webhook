apiVersion: v1
kind: Namespace
metadata:
  name: pvc-webhook

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pvc-webhook
  namespace: pvc-webhook

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pvc-webhook
  namespace: pvc-webhook
spec:
  replicas: 2
  selector: { matchLabels: { app: pvc-webhook } }
  template:
    metadata:
      labels: { app: pvc-webhook }
    spec:
      serviceAccountName: pvc-webhook
      containers:
      - name: server
        image: yourrepo/pvc-webhook:0.1.0
        imagePullPolicy: IfNotPresent
        env:
        - name: DEFAULT_SIZE
          value: "10Gi"
        - name: DEFAULT_STORAGE_CLASS
          value: "standard"
        - name: DEFAULT_ACCESS_MODES
          value: "ReadWriteOnce"
        ports:
        - name: https
          containerPort: 9443
        volumeMounts:
        - name: tls
          mountPath: /tls
          readOnly: true
      volumes:
      - name: tls
        secret:
          secretName: pvc-webhook-tls

---
apiVersion: v1
kind: Service
metadata:
  name: pvc-webhook
  namespace: pvc-webhook
spec:
  selector: { app: pvc-webhook }
  ports:
  - name: https
    port: 443
    targetPort: 9443

apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned
  namespace: pvc-webhook
spec:
  selfSigned: {}

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: pvc-webhook-cert
  namespace: pvc-webhook
spec:
  secretName: pvc-webhook-tls
  duration: 2160h # 90d
  renewBefore: 360h # 15d
  issuerRef:
    name: selfsigned
  dnsNames:
    - pvc-webhook.pvc-webhook.svc
    - pvc-webhook.pvc-webhook.svc.cluster.local

apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: pvc-converter
webhooks:
- name: pvc-converter.pvc-webhook.svc
  admissionReviewVersions: ["v1"]
  sideEffects: None
  failurePolicy: Fail
  matchPolicy: Equivalent
  reinvocationPolicy: IfNeeded
  clientConfig:
    service:
      name: pvc-webhook
      namespace: pvc-webhook
      path: /mutate
      port: 443
    caBundle: ${CA_BUNDLE_BASE64} # cert-manager can inject via patch or use cainjector if available
  rules:
  - apiGroups: [""]
    apiVersions: ["v1"]
    operations: ["CREATE","UPDATE"]
    resources: ["pods"]
    scope: "*"
  objectSelector:
    matchExpressions:
    - key: pvc-webhook/enabled
      operator: In
      values: ["true"]

